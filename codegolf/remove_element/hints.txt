While the problem says do not allocate space for another array, this is not checked, and is only to prevent confusion in returning a different array instead of modifying the reference. You can create as many lists and such as you like.

Additionally, slicing in assignments behaves as one would expect, that is- you can assign a list or slice to a slice of another list. Example:

foo = [0, 1, 2, 3, 4]
foo[1:3] = [5, 5]
print(foo)
# prints [0, 5, 5, 3, 4]

The sizes of the two slices don't need to even match if the stride is 1 (or not supplied), it will just concatenate both sides of the existing list to the new slice. For example

foo = [0, 1, 2, 3, 4]
foo[1:4] = [5]
print(foo)
# prints [0, 5, 4]

foo = [0, 1, 2, 3, 4]
foo[1:2] = [5, 6, 7, 8, 9]
print(foo)
# prints [0, 5, 6, 7, 8, 9, 2, 3, 4]

All of these change `foo` in-place; they do not create a new list.


Additionally, it may be useful to use a list comprehension in conjunction with the above, maybe of the form:

foo = [a for a in bar if a == b]

-where we use a conditional (`if`) to drop elements from the new list.
